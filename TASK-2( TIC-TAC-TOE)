//TASK-2
// TIC-TAC-TOE AI
//
//Implement an AI agent that plays the classic game of Tic-Tac-Toe
//against a human player. You can use algorithms like Minimax with
//or without Alpha-Beta Pruning to make the AI player unbeatable.
//This project will help you understand game theory and basic search
//algorithms.

import java.util.Scanner;

public class SimpleTicTacToeAI {

    private static final char EMPTY = ' ';
    private static final char USER = 'X';
    private static final char AI = 'O';
    private static final int SIZE = 3;

    private char[][] board = new char[SIZE][SIZE];
    private char currentPlayer = USER;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        SimpleTicTacToeAI game = new SimpleTicTacToeAI();
        boolean playAgain;

        do {
            game.initializeBoard();
            game.play();
            System.out.print("Do you want to play again? (yes/no): ");
            playAgain = scanner.next().equalsIgnoreCase("yes");
        } while (playAgain);

        System.out.println("Game Over");
        scanner.close();
    }

    public SimpleTicTacToeAI() {
        initializeBoard();
    }

    private void initializeBoard() {
        for (int i = 0; i < SIZE; i++) {
            for (int j = 0; j < SIZE; j++) {
                board[i][j] = EMPTY;
            }
        }
    }

    public void play() {
        Scanner scanner = new Scanner(System.in);
        while (true) {
            printBoard();
            if (currentPlayer == USER) {
                userMove(scanner);
            } else {
                aiMove();
            }

            if (checkWin()) {
                printBoard();
                if (currentPlayer == USER) {
                    System.out.println("User wins!");
                } else {
                    System.out.println("AI wins!");
                }
                break;
            } else if (isBoardFull()) {
                printBoard();
                System.out.println("It's a draw!");
                break;
            }

            // Switch players
            currentPlayer = (currentPlayer == USER) ? AI : USER;
        }
    }

    private void userMove(Scanner scanner) {
        int row, col;
        while (true) {
            System.out.print("Enter your move (row and column) [0, 1, 2]: ");
            row = scanner.nextInt();
            col = scanner.nextInt();
            if (isValidMove(row, col)) {
                board[row][col] = USER;
                break;
            } else {
                System.out.println("Invalid move. Please try again.");
            }
        }
    }

    private void aiMove() {
        int[] move = findBestMove();
        board[move[0]][move[1]] = AI;
        System.out.println("AI places O at (" + move[0] + ", " + move[1] + ")");
    }

    private int[] findBestMove() {
        int bestScore = Integer.MIN_VALUE;
        int[] bestMove = new int[]{-1, -1};

        for (int i = 0; i < SIZE; i++) {
            for (int j = 0; j < SIZE; j++) {
                if (board[i][j] == EMPTY) {
                    board[i][j] = AI;
                    int score = minimax(false);
                    board[i][j] = EMPTY;
                    if (score > bestScore) {
                        bestScore = score;
                        bestMove[0] = i;
                        bestMove[1] = j;
                    }
                }
            }
        }
        return bestMove;
    }

    private int minimax(boolean isMaximizing) {
        if (checkWin()) {
            return isMaximizing ? -10 : 10;
        }
        if (isBoardFull()) {
            return 0;
        }

        int bestScore = isMaximizing ? Integer.MIN_VALUE : Integer.MAX_VALUE;
        char opponent = (currentPlayer == AI) ? USER : AI;

        for (int i = 0; i < SIZE; i++) {
            for (int j = 0; j < SIZE; j++) {
                if (board[i][j] == EMPTY) {
                    board[i][j] = isMaximizing ? AI : USER;
                    int score = minimax(!isMaximizing);
                    board[i][j] = EMPTY;
                    bestScore = isMaximizing ? Math.max(score, bestScore) : Math.min(score, bestScore);
                }
            }
        }
        return bestScore;
    }

    private boolean isValidMove(int row, int col) {
        return row >= 0 && row < SIZE && col >= 0 && col < SIZE && board[row][col] == EMPTY;
    }

    private boolean checkWin() {
        for (int i = 0; i < SIZE; i++) {
            if (board[i][0] != EMPTY && board[i][0] == board[i][1] && board[i][1] == board[i][2]) {
                return true;
            }
            if (board[0][i] != EMPTY && board[0][i] == board[1][i] && board[1][i] == board[2][i]) {
                return true;
            }
        }
        if (board[0][0] != EMPTY && board[0][0] == board[1][1] && board[1][1] == board[2][2]) {
            return true;
        }
        if (board[0][2] != EMPTY && board[0][2] == board[1][1] && board[1][1] == board[2][0]) {
            return true;
        }
        return false;
    }

    private boolean isBoardFull() {
        for (int i = 0; i < SIZE; i++) {
            for (int j = 0; j < SIZE; j++) {
                if (board[i][j] == EMPTY) {
                    return false;
                }
            }
        }
        return true;
    }

    private void printBoard() {
        System.out.println("Current board:");
        for (int i = 0; i < SIZE; i++) {
            for (int j = 0; j < SIZE; j++) {
                System.out.print(board[i][j]);
                if (j < SIZE - 1) System.out.print(" | ");
            }
            System.out.println();
            if (i < SIZE - 1) System.out.println("--|---|--");
        }
    }
}
